{"version":3,"sources":["dmProject.ts","index.tsx"],"names":["builtupContainer","Array","selectX","list","Math","floor","random","length","decisionMaker","clues","knowledge","characters","attemptsLeft","canBe","character","giveUp","clue","feature","value","push","console","log","rSubj","rVerb","constr2feat","text","startsWith","replace","replaceAll","say","send","_context","type","sayAnything","functionForWhatToSay","binaryInfoRequestTranstition","whatToSay","onYes","onNo","initial","entry","assign","correction","context","timeout","states","prompt","on","ENDSPEECH","ask","askWithConfidence","cMgnt","confidenceSentinel","cReq","clarificationRequest","cReqProcessing","cReqResponseMgnt","mainTaskProcessing","always","target","cond","whatissaid","grammar","actions","answer","proceed","gate","nomatchHandling","firstConfusion","backToConversation","secondConfusion","thirdConfusion","correctionExpression","whereToGo","internal","forFirstConfusion","forSecondConfusion","forThirdConfusion","confirmation","RECOGNISED","recResult","utterance","TIMEOUT","exitTransition","clevel","onRecognised","onTimeout","confidence","restateTransition","whereToTransition","contextFiller","whatToAssign","systemRole","dmMachine","idle","CLICK","init","TTS_READY","attempts","conversation","user","hist","history","greeting","gameQuest","goodBye","initGame","selectRoles","activateKnowledge","knowledgeModule","features","goToRole","selectChar","reselectRole","systemAsQuestioner","builtup","prepareQuestion","selectFeat","item","filter","elementInList","nextQuestion","askQuestion","listOfFeatures","myFeature","myValue","fv","updater","binaryInfoRequestUpdate","addOne","decide","guess","makeGuess","winner","looser","askWhatsNext","systemAsAnswerer","extractFeature","extractFeat","S","V","redefine","toLowerCase","output","v","s","includes","newText","construction","qParser","giveValueOfFeature","knowledgeData","myCharacter","transitArea","waitForNewQ","pushForward","noAttemptsLeft","endGame","whatsNext","cancel","REGION","inspect","url","iframe","machine","Machine","id","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","getToken","invoke","src","_evt","getAuthorizationToken","onDone","event","azureAuthorizationToken","data","onError","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","test","name","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","RECSTOP","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","content","REACT_APP_TTS_LEXICON","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","current","figureButtons","tdmExpectedAlternatives","o","visual_information","map","i","onClick","semantic_expression","fetch","Request","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.0937144b.chunk.js","sourcesContent":["import { TIMEOUT } from \"dns\";\nimport { Context } from \"microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig\";\nimport { MachineConfig, send, Action, assign, State } from \"xstate\";\nimport { respond } from \"xstate/lib/actions\";\n\n// ===============  UTILS ===================================\n// -------    Import   --------------------------------------\nimport * as knowledgeModule from \"./knowledge.json\";\n\n// -------    Other    --------------------------------------\nconst myCLevel: number = 0.3;\nconst myAttempts: number = 5;\nconst acceptedTimeouts: number = 3;\n\ninterface featureValuePair {\n    feature: string;\n    value: string;\n}\n\nvar builtupContainer = new Array<featureValuePair>();\n\nfunction selectX(list: Array<any>) { // ... Array<string>\n    let randElement = list[Math.floor(Math.random() * list.length)];\n    return randElement\n}\n\nfunction remover(list: Array<string>, item: string) { // remove item from list of strings; return list\n    return list.filter( function(elementInList: string) { \n        return elementInList !== item; \n    });\n}\n\nfunction updater(listOfFeatures: Array<featureValuePair>, myFeature: string, myValue: string) {\n    let fv: featureValuePair = {\n        feature: myFeature,\n        value: myValue\n    }\n    listOfFeatures.push(fv); // THIS WILL RETURN A NUMBER! (AND UPDATE LIST)\n    return listOfFeatures \n}\n\nfunction prepareQuestionAsQuestioner(feature: string) {\n    if (feature.startsWith(\"is\")) {\n      return `Is your character ${feature.replace(\"is_\", \"\").replaceAll(\"_\", \" \")}?`\n    } else\n    if (feature.startsWith(\"has\")) {\n      return `Does your character have ${feature.replace(\"has_\", \"\").replaceAll(\"_\", \" \")}?`\n    } else\n      return `Does your character ${feature.replaceAll(\"_\", \" \")}`\n  }\n\nfunction decisionMaker(clues: Array<any>, knowledge: any, characters: any, attemptsLeft: number) {\n// Checks builtup against knowledge;\n// Excludes impossible characters from set S\n// If:\n    // Unique character X: guess X; return name\n    // No more attempts, then randomly select character within S; return name\n// Else: return: \"uncertain\"\n\n    let canBe: Array<any> = [];\n    for (let character of characters) {\n        let giveUp = 0;\n        for (let clue of clues) {\n            let feature = clue.feature;\n            let value   = clue.value;\n\n            if (knowledge[character][feature] !== value) {\n                giveUp = giveUp + 1;\n                }\n        }\n        if (giveUp === 0) {\n            canBe.push(character);\n        }  \n    }\n    console.log(`Can-be-Characters: ${canBe}.`)\n    if (attemptsLeft === 0) {\n        if (canBe.length === 0) {\n            return characters[Math.floor(Math.random() * characters.length)]\n        } else \n            return canBe[Math.floor(Math.random() * canBe.length)] \n        // make a random guess among alternatives \n        // NB. if length of canBe == 1, then this will be the random guess\n            // ... if no character in canBe, then make guess among all characters (this will fail, but it is a guess)\n    } else\n        if (canBe.length === 1) {\n            return canBe[0]\n        } else\n        return \"uncertainty\" // ... continue asking for information\n        }\n\nvar rSubj = [\"your character\", \"he\", \"she\", \"it\"];\nvar rVerb = [\"is\", \"does\"];\n\nfunction qParser(text: string, S: any = rSubj, V: any = rVerb) {\n    let redefine = text.toLowerCase();\n    let output = {\"construction\": \"\", \"feature\": \"notAbleToParse\"}\n    for (let v of V) {\n        for (let s of S) {\n            if (redefine.includes(v+\" \"+s)) {\n                let newText = redefine.replace(v+\" \"+s, v+\" \"+\"SUBJ\").replace(\"?\", \"\");\n                let feat: string = constr2feat(newText);\n                output = {\"construction\": newText, \"feature\": feat};  \n            } \n        } \n    } \n    console.log(`Construction: ${output.construction}. Extracted feature: ${output.feature}.`)\n    return output\n} \n\nfunction constr2feat(text: string) {\n    if (text.startsWith(\"is SUBJ\")) {\n        return text.replace(\"is SUBJ\", \"is\").replaceAll(\" \", \"_\")\n    } else\n    if (text.startsWith(\"does SUBJ\")) {\n        return text.replace(\"does SUBJ \", \"\").replace(\"have\", \"has\").replaceAll(\" \", \"_\")\n    } else return \"\"\n    }\n\nfunction answerQuestionAsAnswerer(knowledgeData:any, myCharacter: string, feature:string) {\n    if (feature in knowledgeData[myCharacter]) {\n        return knowledgeData[myCharacter][feature];\n    } else {\n        return \"I do not know\"\n    };\n}   \n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction sayAnything( functionForWhatToSay: any ) { // MB. This is basically send() under an another name\n    return send(functionForWhatToSay)\n}\n\n// ==================== INFORMATION MANAGEMENT FUNCTIONS ======================================\n\nfunction binaryInfoRequestTranstition(whatToSay: any, onYes: string, onNo: string ):MachineConfig<SDSContext, any, SDSEvent> {\n    return {\n        initial: \"prompt\",\n        entry: [\n            assign( {correction: (context) => context.correction = 0} ), \n            assign( {timeout: (context) => context.timeout = 0} )\n        ],\n        states: {\n            prompt: {\n                entry: sayAnything(whatToSay),                    \n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {...askWithConfidence(\"cMgnt\", \"prompt\")},\n            cMgnt: {...confidenceSentinel(\"mainTaskProcessing\")},\n            cReq: {...clarificationRequest()},\n            cReqProcessing: {...cReqResponseMgnt('mainTaskProcessing', \"prompt\")},\n            mainTaskProcessing: {\n                always: [\n                    {\n                        target: '#root.dm.attempts',\n                        cond: (context) => context.whatissaid === \"Attempts.\"\n                    },\n                    {\n                        target: 'proceed',\n                        cond: (context) => \"answer\" in (grammar[context.whatissaid] || {}), \n                        actions: assign({ answer: (context) => grammar[context.whatissaid].answer! })\n                    },\n                    { \n                        target: 'gate',\n                    }\n                ]\n            },\n            proceed: {\n                always: [\n                    {\n                        target: onYes,\n                        cond: (context: SDSContext) => context.answer === \"yes\",\n                    },\n                    {\n                        target: onNo,\n                        cond: (context: SDSContext) => context.answer === \"no\",\n                    },\n                ]\n            },\n            gate: {...nomatchHandling(1, 2, 3)},\n            firstConfusion: {...backToConversation(\"I do not understand. Please tell me again.\", \"prompt\")},\n            secondConfusion: {...backToConversation(\"I still do not understand. Please tell me again.\", \"prompt\")},\n            thirdConfusion: {...backToConversation(\"This is not going anywhere. Good bye.\", '#root.dm.init')},\n        },\n    }\n}\n\nfunction binaryInfoRequestUpdate(whereToTransition: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return {\n        initial: \"prompt\",\n        entry: [\n            assign( {correction: (context) => context.correction = 0} ), \n            assign( {timeout: (context) => context.timeout = 0} )\n        ],\n        states: {\n            prompt: {\n                entry: send((context: SDSContext) => ({ type: \"SPEAK\", value: context.nextQuestion })),                    \n                on: { ENDSPEECH: 'ask' },\n            },\n            ask: {...askWithConfidence(\"cMgnt\", \"prompt\")},\n            cMgnt: {...confidenceSentinel(\"mainTaskProcessing\")},\n            cReq: {...clarificationRequest()},\n            cReqProcessing: {...cReqResponseMgnt('mainTaskProcessing', \"prompt\")},\n            mainTaskProcessing: {\n                entry: (context) => console.log(`Builtup: ${context.builtup}`),\n                always: [\n                    {\n                        target: '#root.dm.attempts',\n                        cond: (context) => context.whatissaid === \"Attempts.\"\n                        //cond: (context) => (context.whatissaid in askForAttemptsGrammar)\n                    },\n                    {\n                        target: 'proceed',\n                        cond: (context) => \"answer\" in (grammar[context.whatissaid] || {}), \n                        // Note: value in knowledege.json must match form of utterance; e.g. \"Yes.\" vs \"yes\".\n                        actions: assign({ answer: (context) => grammar[context.whatissaid].answer! })\n                    },\n                    { \n                        target: 'gate',\n                    }\n                ]\n            },\n\n            proceed: {\n                entry: [\n                    assign({builtup: (context) => context.builtup = updater(context.builtup, context.selectFeat, context.answer)}),\n                ],\n                always: {\n                    target: whereToTransition,\n                }\n            },\n\n            gate: {...nomatchHandling(1, 2, 3)},\n            firstConfusion: {...backToConversation(\"I do not understand. Please tell me again.\", \"prompt\")},\n            secondConfusion: {...backToConversation(\"I still do not understand. Please tell me again.\", \"prompt\")},\n            thirdConfusion: {...backToConversation(\"This is not going anywhere. Good bye.\", '#root.dm.init')},\n        },\n    }\n}\n\nfunction openInfoRequest(whatToSay: any , whereToTransition: string, contextFiller: string, whatToAssign: any): MachineConfig<SDSContext, any, SDSEvent> {\n    return {\n        initial: \"prompt\",\n        entry: [\n            assign( {correction: (context) => context.correction = 0} ), \n            assign( {timeout: (context) => context.timeout = 0} )\n        ],\n        states: {\n            prompt: {\n                entry: sayAnything(whatToSay),                    \n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {...askWithConfidence(\"cMgnt\", \"prompt\")},\n            cMgnt: {...confidenceSentinel(\"mainTaskProcessing\")},\n            cReq: {...clarificationRequest()},\n            cReqProcessing: {...cReqResponseMgnt('mainTaskProcessing', \"prompt\")},\n            mainTaskProcessing: {\n                always: [\n                    {\n                        target: '#root.dm.attempts',\n                        cond: (context) => context.whatissaid === \"Attempts.\"\n                        //cond: (context) => (context.whatissaid in askForAttemptsGrammar)\n                    },\n                    {\n                        target: whereToTransition,\n                        cond: (context) => contextFiller in (grammar[context.whatissaid] || {}), \n                        actions: assign(whatToAssign)\n                    },\n                    { \n                        target: 'gate',\n                    }\n                ]\n            },\n            gate: {...nomatchHandling(1, 2, 3)},\n            firstConfusion: {...backToConversation(\"I do not understand. Please tell me again.\", \"prompt\")},\n            secondConfusion: {...backToConversation(\"I still do not understand. Please tell me again.\", \"prompt\")},\n            thirdConfusion: {...backToConversation(\"This is not going anywhere. Good bye.\", '#root.dm.init')},\n        },\n    }\n}\n\nfunction giveInfo(): MachineConfig<SDSContext, any, SDSEvent> {\n    return {\n        initial: \"prompt\",\n        entry: [ \n            assign( {correction: (context) => context.correction = 0} ), \n            assign( {timeout: (context) => context.timeout = 0} ),\n        ],\n        states: {\n            prompt: {\n                entry: say(\"Ask your question.\"),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {...askWithConfidence(\"cMgnt\", \"prompt\")},\n            cMgnt: {...confidenceSentinel(\"extractFeature\")},\n            cReq: {...clarificationRequest()},\n            cReqProcessing: {...cReqResponseMgnt('extractFeature', \"prompt\")},\n            extractFeature: {\n                entry: assign({extractFeat: (context) => qParser(context.whatissaid)[\"feature\"] }),\n                always: [\n                    {\n                        target: '#root.dm.attempts',\n                        cond: (context) => context.whatissaid === \"Attempts.\"\n                        //cond: (context) => (context.whatissaid in askForAttemptsGrammar),\n                    },\n                    {\n                        target: \"gate\",\n                        cond: (context) => context.extractFeat === \"notAbleToParse\"\n                    },\n                    {\n                        target: \"endGame\",\n                        cond: (context) => context.knowledge[context.selectChar][context.extractFeat] === \"success\"\n                    },\n                    {\n                        target: \"giveValueOfFeature\"\n                    }\n                ]\n            },\n            giveValueOfFeature: {\n                entry: [\n                    assign({attemptsLeft: (context) => context.attemptsLeft - 1}),\n                    (context) => console.log(`Attempts left: ${context.attemptsLeft}`),\n                    sayAnything(\n                        (context: SDSContext) => \n                        ({type: \"SPEAK\", value: answerQuestionAsAnswerer(context.knowledge, context.selectChar, context.extractFeat)})\n                    ),\n                ],\n                on: {ENDSPEECH: \"transitArea\" } \n            }, \n            \n            transitArea: {\n                always: [\n                    {\n                        target: \"waitForNewQ\",\n                        cond: (context) => context.attemptsLeft > 0\n                    },\n                    {\n                        target: \"noAttemptsLeft\",\n                        cond: (context) => context.attemptsLeft === 0\n                    }\n                ]\n            }, \n                        \n            waitForNewQ: {...askWithConfidence(\"cMgnt\", \"pushForward\")}, \n            \n            pushForward: {\n                entry: say(\"What is your next question about my character?\"),\n                on: {ENDSPEECH: 'waitForNewQ'}\n            },\n\n            noAttemptsLeft: {\n                entry: say(\"Sorry! You have no more attempts.\"),\n                on: {ENDSPEECH:  \"whatsNext\"}\n            },\n\n            endGame: {\n                entry: say('<prosody contour=\"(50%, +43%)\">Hurrah!</prosody> Your guess was correct!'),\n                on: {ENDSPEECH:  \"whatsNext\"}\n            },\n\n            whatsNext: {\n                ...binaryInfoRequestTranstition(\n                    (context: SDSContext) => ({type: \"SPEAK\", value: \"Do you want to play again?\"}),\n                    \"#root.dm.conversation.initGame\",\n                    '#root.dm.init'\n                )\n            },\n\n            gate: {...nomatchHandling(1, 2, 5)},\n            //  V  V  V  V  V ---  Redefined for `giveInfo()` purposes  --- V  V  V  V  V  V \n            firstConfusion: {...backToConversation(\"Please ask me a question about my character.\", \"ask\")}, \n            secondConfusion: {...backToConversation(\"In this game you should ask me questions about the character I decided on. Please ask me a question about my character.\", \"ask\")}, \n            thirdConfusion: {...backToConversation(\"This is not going anywhere. Good bye.\", '#root.dm.init')}, \n        },\n    }\n}\n\n// ==============  UTILS OF INFOMGNT  ============================\n\nfunction backToConversation(correctionExpression: string, whereToGo: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return {\n        entry: say(correctionExpression),\n        on: { \n            ENDSPEECH: {\n                target: whereToGo,\n                internal: false,\n                actions: assign({correction: (context) => context.correction + 1 }), // add 1 on every attempt\n            } \n        }\n    }\n}\n\nfunction nomatchHandling(forFirstConfusion: number, forSecondConfusion: number, forThirdConfusion: number) {\n    return {\n        entry: (context:SDSContext) => console.log(`Correction count: ${context.correction}`),\n        always: [\n            {\n                target: 'firstConfusion',\n                cond: (context: SDSContext) => context.correction <= forFirstConfusion\n            },\n            {\n                target: 'secondConfusion',\n                cond: (context: SDSContext) => (context.correction > forFirstConfusion && context.correction < forThirdConfusion)\n            },\n            {\n                target: 'thirdConfusion',\n                cond: (context: SDSContext) => (context.correction > forSecondConfusion && context.correction <= forThirdConfusion)\n            }\n        ]\n    }\n}\n\nfunction clarificationRequest(): MachineConfig<SDSContext, any, SDSEvent> {\n    return {\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: sayAnything((context: SDSContext) => ({type: \"SPEAK\", value: `Did you say ${context.whatissaid}.`})),\n                on: { ENDSPEECH: 'confirmation' }\n            },\n            confirmation: {entry: send('LISTEN')},\n        },\n        on: {\n            RECOGNISED: [\n            {\n                target: 'cReqProcessing',\n                cond: (context: SDSContext) => \"answer\" in (grammar[context.recResult[0].utterance] || {}), \n                actions: assign({ answer: (context) => grammar[context.recResult[0].utterance].answer! })\n            },\n            { // MB. Simplified... no altered reprompts or conditions\n                target: '.prompt'\n            }\n            ],\n            TIMEOUT: [\n                { // MB. Simplified...\n                    target: '.prompt'\n                },        \n            ]\n        }\n    }\n}\n\nfunction confidenceSentinel(exitTransition: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return {\n        always: [\n            {\n                target: 'cReq',\n                cond: (context) => context.clevel < myCLevel\n            },\n            {\n                target: exitTransition\n            },\n        ]\n    }\n}\n\nfunction askWithConfidence(onRecognised: string, onTimeout: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return {\n        entry: send('LISTEN'),\n        on: {\n            RECOGNISED: {\n                target: onRecognised,\n                //target: 'cMgnt',\n                actions: [\n                    assign({ whatissaid: (context) => context.recResult[0].utterance }),\n                    assign({ clevel: (context) => context.recResult[0].confidence })\n                ]\n            },\n            TIMEOUT: [\n                {\n                    target: onTimeout,\n                    //target: 'prompt',\n                    cond: (context: SDSContext) => context.timeout < acceptedTimeouts,\n                    actions: assign({timeout: (context) => context.timeout + 1 })\n                },\n                {\n                    target: '#root.dm.init'\n                }\n            ]\n        }\n    }\n}\n\nfunction cReqResponseMgnt(exitTransition: string, restateTransition: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return {\n        always: [\n            {\n                target: exitTransition,\n                cond: (context) => context.answer === \"yes\"\n            },\n            {\n                target: restateTransition,\n                cond: (context) => context.answer === \"no\"\n            },\n        ]\n    }\n} \n\n// ===============  GRAMMAR ==============================\n\n/*\n// Hmmm... I do not get the in-statement version to work :(\nconst askForAttemptsGrammar: Array<string> = [\n    \"How many attempts do I have left?\",\n    \"How many attempts do I have?\",\n    \"Attempts.\",\n    \"How many attempts left.\",\n    \"How many questons do I have left?\",\n    \"How many questions left.\"\n]\n*/\n\nconst grammar: { [index: string]: \n    { \n        title?: string, \n        day?: string, \n        answer?: string,\n        systemRole?: string,\n    } \n} = {\n    // ============  Y/N Answers  ==============\n    \"Yes.\": { answer: \"yes\" },\n    \"Yeah.\": { answer: \"yes\" },\n    \"Yep.\": { answer: \"yes\" },\n    \"No.\": { answer: \"no\" },\n    \"Nope.\": { answer: \"no\" },\n\n    // ============  User Roles =============\n    \"Answerer.\": { systemRole: \"Questioner\" },\n    \"I want to be answerer.\": { systemRole: \"Questioner\" },\n    \"You can be questioner.\": { systemRole: \"Questioner\" },\n    \"You can ask the questions.\": { systemRole: \"Questioner\" },\n    \"You can ask questions.\": { systemRole: \"Questioner\" },\n    \"I want to answer.\": { systemRole: \"Questioner\" },\n    \"I can answer.\": { systemRole: \"Questioner\" },\n    \"I want to answer the questions.\": { systemRole: \"Questioner\" },\n    \"I can do the answering.\": { systemRole: \"Questioner\" },\n\n    \"Questioner.\": { systemRole: \"Answerer\" },\n    \"I want to be questioner.\": { systemRole: \"Answerer\" },\n    \"You can be answerer.\": { systemRole: \"Answerer\" },\n    \"I want to ask the questions.\": { systemRole: \"Answerer\" },\n    \"I can ask the questions.\": { systemRole: \"Answerer\" },\n    \"I can ask questions.\": { systemRole: \"Answerer\" }, \n    \"I can do the questioning.\": { systemRole: \"Answerer\" },\n\n    \"You can decide.\": { systemRole: \"Indifference\" },\n    \"You decide.\": { systemRole: \"Indifference\" },\n    \"I do not care.\": { systemRole: \"Indifference\" },\n    \"I don't care.\": { systemRole: \"Indifference\" },\n    \"Doesn't matter.\": { systemRole: \"Indifference\" },\n    \"Does not matter.\": { systemRole: \"Indifference\" },\n    \"It does not matter.\": { systemRole: \"Indifference\" },\n    \"It does not matter to me.\": { systemRole: \"Indifference\" },\n}\n\n// ================  DM MACHINE  ================\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: { // MB. `states` start here \n        idle: { on: { CLICK: 'init' } },\n        init: { on: { TTS_READY: 'conversation', CLICK: 'conversation' } }, //MB. changed: 'welcome' --> 'conversation'\n\n        attempts: {       //MB some attempts-counter perhaps .... ????\n            //entry: say(\"Calm down. I will walk you through this.\"),\n            entry: sayAnything(\n                (context: SDSContext) => ({type: \"SPEAK\", value: `You have ${context.attemptsLeft} attempts left.`})\n            ),\n            on: { \n                ENDSPEECH: '#root.dm.conversation.hist' \n            }\n        },\n\n        conversation: {\n            entry: assign( {user: (context) => context.user = \"Max\"} ),\n            initial: \"greeting\",\n            states: { \n                hist:{ // MB. ??\n                    type: \"history\",\n                    history: \"shallow\" // MB. shallow by default\n                }, \n\n                greeting: {\n                    entry: sayAnything(\n                        (context: SDSContext) => ({type: \"SPEAK\", value: `Hi ${context.user}.`})\n                    ),\n                    on: {ENDSPEECH: \"#root.dm.conversation.gameQuest\"}\n                },\n                \n                gameQuest: {\n                    ...binaryInfoRequestTranstition(\n                        (context: SDSContext) => ({type: \"SPEAK\", value: `Do you want to play twenty questions?`}),\n                        '#root.dm.conversation.initGame',\n                        '#root.dm.conversation.goodBye'\n                    )\n                },\n\n                goodBye: {   \n                    initial: 'prompt',\n                    states: {prompt: {\n                        entry: say(\"OK. Good bye.\"), \n                        on: { ENDSPEECH: '#root.dm.init'}}}\n                }, \n\n                initGame: {  // intialize game: set players and activate knowledge\n                    entry: assign({attemptsLeft: (context) => context.attemptsLeft = myAttempts}),\n                    initial: 'selectRoles',\n                    states: {\n                        selectRoles: {\n                            ...openInfoRequest(\n                                (context: SDSContext) => ({type: \"SPEAK\", value: \"Do you want to be questioner or answerer?\"}),\n                                '#root.dm.conversation.initGame.activateKnowledge',\n                                \"systemRole\",\n                                { systemRole: (context: SDSContext) => grammar[context.recResult[0].utterance].systemRole! }\n                            )\n                        },\n                        \n                        activateKnowledge: {\n                            always: {\n                                target: \"goToRole\",\n                                actions: [\n                                    assign({knowledge: (context) => context.knowledge = knowledgeModule.knowledge }),\n                                    assign({characters: (context) => context.characters = knowledgeModule.characters}),\n                                    assign({features: (context) => context.features = knowledgeModule.features}),\n                                    //(context) => console.log(context.characters),\n                                    //(context) => console.log(context.features)\n                                ],\n                            },\n                        },\n\n                        goToRole: {\n                            entry: (context) => console.log(`System role: ${context.systemRole}.`),\n                            always: [\n                                {\n                                    target: '#root.dm.conversation.systemAsAnswerer',\n                                    cond: (context) => context.systemRole === \"Answerer\",\n                                    actions: [\n                                        assign( { selectChar: (context) => context.selectChar = selectX(context.characters) } ),\n                                        (context) => console.log(`Selected character: ${context.selectChar}.`),\n                                        say(\"OK. I have decided on a character.\"),\n                                    ]\n                                },\n                                {\n                                    target: '#root.dm.conversation.systemAsQuestioner',\n                                    cond: (context) => context.systemRole === \"Questioner\",\n                                },\n                                {\n                                    target: \"reselectRole\",\n                                    cond: (context) => context.systemRole === \"Indifference\"\n                                }\n                            ]\n                        },\n\n                        reselectRole: {\n                            entry: assign({systemRole: (context) => context.systemRole = selectX([\"Answerer\", \"Questioner\"]) }), \n                            always: \"goToRole\"\n                        }\n                        \n                    }\n                },\n                \n\n                systemAsQuestioner: {\n                    // \"pop\" feature from F-list --> nextFeature\n                    // say(`${nextFeature}?`)\n                    // listen and update builtup\n                    // check builtup against knowledge\n                    // decide\n\n                    entry: assign( { builtup: (context) => context.builtup = builtupContainer } ), // to be populated with features...\n                    initial: \"prepareQuestion\",\n                    states: {\n                        prepareQuestion: {\n                            entry: [\n                                assign({selectFeat: (context) => context.selectFeat = selectX(context.features)}),\n                                assign({features: (context) => context.features = remover(context.features, context.selectFeat)}),\n                                assign({nextQuestion: (context) => prepareQuestionAsQuestioner(context.selectFeat)})\n                            ], \n                            always: \"askQuestion\"\n                        },\n                        askQuestion: {\n                            ...binaryInfoRequestUpdate(\"#root.dm.conversation.systemAsQuestioner.addOne\")\n                        },\n\n                        addOne: {\n                            entry: [\n                                assign({attemptsLeft: (context) => context.attemptsLeft - 1 }),\n                                (context) => console.log(`Attempts left: ${context.attemptsLeft}.`)\n                            ], \n                            always: \"#root.dm.conversation.systemAsQuestioner.decide\"\n                        },\n\n                        decide: {\n                            always: [\n                                {\n                                    target: '#root.dm.conversation.systemAsQuestioner.prepareQuestion',\n                                    actions: (context) => console.log(`DecisionStatus: ${ decisionMaker(context.builtup, context.knowledge, context.characters, context.attemptsLeft) }` ),\n                                    cond: (context) => decisionMaker(context.builtup, context.knowledge, context.characters, context.attemptsLeft) === \"uncertainty\"\n                                },\n                                {\n                                    target: '#root.dm.conversation.systemAsQuestioner.makeGuess',\n                                    actions: assign({\n                                        guess: (context) => context.guess = decisionMaker(\n                                            context.builtup, context.knowledge, context.characters, context.attemptsLeft\n                                        )\n                                    })\n                                }\n                            ]\n                        },\n                        makeGuess: {\n                            ...binaryInfoRequestTranstition(\n                                (context: SDSContext) => ({type: \"SPEAK\", value: `Is it ${context.guess}?`}),\n                                '#root.dm.conversation.systemAsQuestioner.winner',\n                                '#root.dm.conversation.systemAsQuestioner.looser'\n                            )\n                        },\n\n                        winner: {\n                            entry: say('<prosody contour=\"(31%, +74%)\">Jippie!</prosody>'),\n                            always: \"askWhatsNext\"\n                        }, \n\n                        looser: {\n                            entry: say('<prosody contour=\"(70%, -52%)\">Oh</prosody>. What a pitty!'),\n                            always: \"askWhatsNext\"\n                        },\n\n                        askWhatsNext: {\n                            ...binaryInfoRequestTranstition(\n                                (context: SDSContext) => ({type: \"SPEAK\", value: `Do you want to play again?`}),\n                                '#root.dm.conversation.initGame',\n                                '#root.dm.conversation.goodBye'\n                            )\n                        }\n                    }\n                },\n                \n                systemAsAnswerer: { ...giveInfo() },\n            }\n        }\n    } // MB. `states` end here \n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmProject\"; // MB. for project\n//import { dmMachine } from \"./dmAppointmentPlus\"; // MB. for lab 5\n//import { dmMachine } from \"./dmAppointment\"; // MB changed this \n//import { dmMachine } from \"./dmColourChanger\"; // MB comment out\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 3\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause',\n                        RECSTOP: 'idle'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(content);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}