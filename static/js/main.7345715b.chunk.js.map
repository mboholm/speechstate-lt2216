{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","welcome","RECOGNISED","target","cond","context","recResult","utterance","actions","assign","TIMEOUT","prompt","entry","ENDSPEECH","ask","nomatch","info","cancel","REGION","inspect","url","iframe","machine","Machine","id","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","getToken","invoke","src","_evt","getAuthorizationToken","onDone","event","azureAuthorizationToken","data","onError","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","console","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","fetch","Request","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.7345715b.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string } } = {\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"at ten\": { time: \"10:00\" },\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: { // MB. start `states` \n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'welcome',\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'info',\n                        cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Let's create a meeting. What is it about?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        info: {\n            entry: send((context) => ({\n                type: 'SPEAK',\n                value: `OK, ${context.title}`\n            })),\n            on: { ENDSPEECH: 'init' }\n        }\n    }\n})\n\nconst kbRequest = (text: string) =>\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\"; // MB changed this \n// import { dmMachine } from \"./dmColourChanger\"; // MB comment out\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 10\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}